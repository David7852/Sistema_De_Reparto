<?php

/**
 * This is the model base class for the table "pago".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Pago".
 *
 * Columns in table "pago" available as properties of the model,
 * followed by relations of table "pago" available as properties of the model.
 *
 * @property integer $cod_pago
 * @property integer $id_empresa
 * @property string $fecha_realizacion
 * @property double $monto
 * @property string $cod_boucher
 * @property string $factura
 * @property integer $cod_envio
 *
 * @property Envio $codEnvio
 */
abstract class BasePago extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'pago';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Pago|Pagos', $n);
	}

	public static function representingColumn() {
		return array('monto','cod_boucher');
	}

	public function rules() {
		return array(
			array('monto, cod_boucher', 'required'),
			array('id_empresa, cod_envio', 'numerical', 'integerOnly'=>true),
			array('monto', 'numerical'),
			array('fecha_realizacion', 'length', 'max'=>25),
			array('cod_boucher', 'length', 'max'=>20),
			array('factura', 'length', 'max'=>600),
			array('cod_pago, id_empresa, fecha_realizacion, monto, cod_boucher, factura, cod_envio', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'codEnvio' => array(self::BELONGS_TO, 'Envio', 'cod_envio'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'cod_pago' => Yii::t('app', 'Cod Pago'),
			'id_empresa' => Yii::t('app', 'Id Empresa'),
			'fecha_realizacion' => Yii::t('app', 'Fecha Realizacion'),
			'monto' => Yii::t('app', 'Monto'),
			'cod_boucher' => Yii::t('app', 'Cod Boucher'),
			'factura' => Yii::t('app', 'Factura'),
			'cod_envio' => null,
			'codEnvio' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

                $conexion = $conexion = Util::connect();
                
                if(Util::isEmpresa(Yii::app()->user->name))
                {
                    $query="SELECT `cod_pago` FROM `pago` WHERE `id_empresa`=".Util::getid(Yii::app()->user->name);
                    $r=mysql_query($query,$conexion) or die (mysql_error());

                    $ids=array();//este arreglo sera igual a los ids seleccionados
                    while($arids=mysql_fetch_array($r,MYSQL_ASSOC))
                        foreach($arids as $i)
                            array_push($ids,$i);
                    if(count($ids)>0)//si hay resultados, los muestra
                        $criteria->compare('cod_pago',  $ids, true);
                    else//si no, no muestra nada (nunca un id sera igual a -1)
                        $criteria->compare('cod_pago',  -1, false);
                }
                    
                mysql_close($conexion);
                
		$criteria->compare('cod_pago', $this->cod_pago);
		$criteria->compare('id_empresa', $this->id_empresa);
		$criteria->compare('fecha_realizacion', $this->fecha_realizacion, true);
		$criteria->compare('monto', $this->monto);
		$criteria->compare('cod_boucher', $this->cod_boucher, true);
		$criteria->compare('factura', $this->factura, true);
		$criteria->compare('cod_envio', $this->cod_envio);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
        
        public function searchU() {
		$criteria = new CDbCriteria;

		$criteria->compare('cod_pago', $this->cod_pago);
		$criteria->compare('id_empresa', $this->id_empresa);
		$criteria->compare('fecha_realizacion', $this->fecha_realizacion, true);
		$criteria->compare('monto', $this->monto);
		$criteria->compare('cod_boucher', $this->cod_boucher, true);
		$criteria->compare('factura', $this->factura, true);
		$criteria->compare('cod_envio', $this->cod_envio);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}