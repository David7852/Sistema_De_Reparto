<?php

/**
 * This is the model base class for the table "presupuesto".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Presupuesto".
 *
 * Columns in table "presupuesto" available as properties of the model,
 * followed by relations of table "presupuesto" available as properties of the model.
 *
 * @property integer $cod_presupuesto
 * @property string $fecha_tope
 * @property string $fecha_solicitud
 * @property integer $cod_ruta
 * @property integer $id_empresa
 * @property string $Apendice
 * @property integer $Numero_de_paquetes
 *
 * @property Envio[] $envios
 * @property Paquete[] $paquetes
 * @property Ruta $codRuta
 * @property Empresa $idEmpresa
 */
abstract class BasePresupuesto extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'presupuesto';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Presupuesto|Presupuestos', $n);
	}

	public static function representingColumn() {
		return array('. ','fecha_tope','Apendice');
	}

	public function rules() {
		return array(
			array('fecha_tope, cod_ruta, Numero_de_paquetes', 'required'),
			array('cod_ruta, id_empresa', 'numerical', 'integerOnly'=>true),
                        array('Numero_de_paquetes','numerical', 'integerOnly'=>true,'min'=>1, 'max'=>1001),
			array('fecha_tope, fecha_solicitud', 'length', 'max'=>30),
			array('Apendice', 'length', 'max'=>500),
			array('Apendice', 'default', 'setOnEmpty' => true, 'value' => null),
			array('cod_presupuesto, fecha_tope, fecha_solicitud, cod_ruta, id_empresa, Apendice, Numero_de_paquetes', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'envios' => array(self::HAS_MANY, 'Envio', 'cod_presupuesto'),
			'paquetes' => array(self::HAS_MANY, 'Paquete', 'cod_presupuesto'),
			'codRuta' => array(self::BELONGS_TO, 'Ruta', 'cod_ruta'),
			'idEmpresa' => array(self::BELONGS_TO, 'Empresa', 'id_empresa'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'cod_presupuesto' => Yii::t('app', 'Presupuesto'),
			'fecha_tope' => Yii::t('app', 'Fecha de entrega'),
			'fecha_solicitud' => Yii::t('app', 'Fecha de Solicitud'),
			'cod_ruta' => null,
			'id_empresa' => null,
			'Apendice' => Yii::t('app', 'Apendice'),
			'Numero_de_paquetes' => Yii::t('app', 'Numero De Paquetes'),
			'envios' => null,
			'paquetes' => null,
			'codRuta' => null,
			'idEmpresa' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;
                
                $conexion = $conexion = Util::connect();
                if(Util::isEmpresa(Yii::app()->user->name))
                {
                    $query="SELECT `cod_presupuesto` FROM `presupuesto` WHERE `id_empresa`=".Util::getid(Yii::app()->user->name);
                    $r=mysql_query($query,$conexion) or die (mysql_error());
                    
                    $ids=array();//este arreglo sera igual a los ids seleccionados
                    while($arids=mysql_fetch_array($r,MYSQL_ASSOC))
                        foreach($arids as $i)
                            array_push($ids,$i);
                        //$HoraSalida=datetime('m/d/Y H:i',  strtotime($model->HoraSalida));//Linea Error
                    if(count($ids)>0)//si hay resultados, los muestra
                        $criteria->compare('cod_presupuesto',  $ids, true);
                    else//si no, no muestra nada (nunca un id sera igual a -1)
                        $criteria->compare('cod_presupuesto',  -1, false);
                    
                }else
                    if(Util::isOperador(Yii::app()->user->name))
                    {
                        $query="SELECT presupuesto.cod_presupuesto from presupuesto inner join envio using (cod_presupuesto)";
                        $r=mysql_query($query,$conexion) or die (mysql_error());

                        $A=array();//este arreglo sera igual a los ids seleccionados para todos los presupuestos con envios asociados
                        while($arids=mysql_fetch_array($r,MYSQL_ASSOC))
                            foreach($arids as $i)
                                array_push($A,$i);
                        $query="SELECT `cod_presupuesto` FROM `envio` WHERE `id_operador`=".Util::getid(Yii::app()->user->name);
                        $r=mysql_query($query,$conexion) or die (mysql_error());
                        $B=array();//este arreglo sera igual a los ids seleccionados de presupuestos cuyos envios fuesen aprobados por este operador
                        while($arid=mysql_fetch_array($r,MYSQL_ASSOC))
                            foreach($arid as $i)
                                array_push($B,$i);
                        $query="SELECT `cod_presupuesto` FROM `presupuesto` WHERE 1";
                        $r=mysql_query($query,$conexion) or die (mysql_error());
                        $C=array();//este arreglo sera igual a los ids seleccionados de todos los presupuestos
                        while($ari=mysql_fetch_array($r,MYSQL_ASSOC))
                            foreach($ari as $i)
                                array_push($C,$i);
                        
                        $ids=array();//este arreglo sera igual a los ids seleccionados
                        foreach($C as $i)//por cada codigo en c
                        {
                            $cond1=false;$cond2=false;
                            foreach($B as $j)//por cada codigo en b
                                if($i==$j)//si el codigo c.i es igual al codigo b.j
                                {
                                    $cond1=true;
                                    break;
                                }
                            if(!$cond1)//si no existe un envio relacionado a este presupuesto aprobado por el operario actual
                            {
                                $cond2=true;
                                foreach($A as $k)//por cada codigo en a
                                    if($i==$k)//si el codigo c.i es igual al codigo a.k, no debe agregarse
                                    {
                                        $cond2=false;
                                        break;
                                    }
                            }                                
                            if($cond1||$cond2)
                            array_push($ids,$i);
                        }
                        if(count($ids)>0)//si hay resultados, los muestra
                            $criteria->compare('cod_presupuesto',  $ids, true);
                        else//si no, no muestra nada (nunca un id sera igual a -1)
                            $criteria->compare('cod_presupuesto',  -1, false);
                    }
                    mysql_close($conexion);

		$criteria->compare('cod_presupuesto', $this->cod_presupuesto);
		$criteria->compare('fecha_tope', $this->fecha_tope, true);
		$criteria->compare('fecha_solicitud', $this->fecha_solicitud, true);
		$criteria->compare('cod_ruta', $this->cod_ruta);
		$criteria->compare('id_empresa', $this->id_empresa);
		$criteria->compare('Apendice', $this->Apendice, true);
		$criteria->compare('Numero_de_paquetes', $this->Numero_de_paquetes);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
        
        public function searchU() {
		$criteria = new CDbCriteria;
                

		$criteria->compare('cod_presupuesto', $this->cod_presupuesto);
		$criteria->compare('fecha_tope', $this->fecha_tope, true);
		$criteria->compare('fecha_solicitud', $this->fecha_solicitud, true);
		$criteria->compare('cod_ruta', $this->cod_ruta);
		$criteria->compare('id_empresa', $this->id_empresa);
		$criteria->compare('Apendice', $this->Apendice, true);
		$criteria->compare('Numero_de_paquetes', $this->Numero_de_paquetes);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
        
        
        
}